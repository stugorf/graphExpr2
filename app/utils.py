"""load_graph_template.py: Loads data into Neo4j instance"""

__author__  = 'David Hughes'
__email__   = 'dhughes@octavebio.com'
__version__ = '0.0.1dev'
__all__     = ['log','setLogLevel']

# Imports
import hydra
import logging
import logging.config
from omegaconf import DictConfig, OmegaConf

# Logging
logging_config = { 
    'version': 1,
    'formatters': { 
        'standard': { 
            'format': '%(asctime)s - %(levelname)s - %(message)s'
        },
    },
    'handlers': { 
        'stream': { 
            'level': 'DEBUG',
            'formatter': 'standard',
            'class': 'logging.StreamHandler',
        },
        'file': { 
            'level': 'DEBUG',
            'formatter': 'standard',
            'class': 'logging.FileHandler',
            'filename': 'app.log'
        },
    },
    'loggers': { 
        __name__: { 
            'handlers': ['stream', 'file'],
            'level': 'DEBUG',
            'propagate': False
        },
    } 
}
logging.config.dictConfig(logging_config)
log = logging.getLogger(__name__)

def setLogLevel(level):
    """Sets the log level for log messages generated by a specific module.

    Parameters
    ----------
    level : str
        The level that the log message should be report at and indicates the seriousness of the event. 
        Default = DEBUG

    Returns
    -------
    STDOUT and local app.log of message in this format: <date> <time> - <loglevel> - <log_message>

    Examples
    ----------
    Sets log level to DEBUG for all proceeding log events
    >> ok.setLogLevel('DEBUG')
    >> ok.log.debug('Lambda running LOCALLY')
    >> result = 2021-11-29 07:49:26,292 - DEBUG - Lambda running LOCALLY
    """
    upper_level = level.upper()
    logging.getLogger(__name__).setLevel(f'{upper_level}')

log.debug( "Logging initialized." )